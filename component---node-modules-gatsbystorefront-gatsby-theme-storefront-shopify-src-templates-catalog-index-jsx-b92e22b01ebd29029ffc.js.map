{"version":3,"sources":["webpack:///./node_modules/@gatsbystorefront/gatsby-theme-storefront-shopify/src/components/Pagination/index.jsx","webpack:///./node_modules/@gatsbystorefront/gatsby-theme-storefront-shopify/src/templates/catalog/CatalogPage.jsx","webpack:///./node_modules/@gatsbystorefront/gatsby-theme-storefront-shopify/src/templates/catalog/CatalogPageBlue.jsx","webpack:///./node_modules/@gatsbystorefront/gatsby-theme-storefront-shopify/src/templates/catalog/CatalogPagePink.jsx","webpack:///./node_modules/@gatsbystorefront/gatsby-theme-storefront-shopify/src/templates/catalog/CatalogPageTeal.jsx","webpack:///./node_modules/@gatsbystorefront/gatsby-theme-storefront-shopify/src/templates/catalog/index.jsx"],"names":["PaginationWrap","Flex","PageNav","Button","Pagination","props","numPages","currentPage","shopifyThemePath","prevLink","nextLink","justifyContent","fontSize","as","GatsbyLink","to","width","mr","p","sx","letterSpacing","rel","variant","opacity","Array","from","length","map","_","i","link","pageNum","Math","max","min","mx","key","borderTop","borderBottom","fontWeight","ml","StyledBox","Box","CollectionDesc","CatalogPage","data","store","siteMetadata","gatsbyStorefrontConfig","gatsbyImageProps","pageContext","limit","skip","cartUrl","collection","nodes","title","description","products","forEach","node","pt","background","px","pb","backgroundColor","padding","product","index","IndividualProduct","shopifyId","position","CollectionTabs","Tabs","handle","prodType","useStaticQuery","defaultActiveKey","Tab","eventKey","tabTitle","tab","id","CatalogPageTeal","catalogQuery","storeName","Layout","Helmet","titleTemplate","defer","name","content","CatalogPageBlue","CatalogPagePink"],"mappings":"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","file":"component---node-modules-gatsbystorefront-gatsby-theme-storefront-shopify-src-templates-catalog-index-jsx-b92e22b01ebd29029ffc.js","sourcesContent":["import React, { Fragment } from 'react';\nimport GatsbyLink from 'gatsby-link';\nimport styled from '@emotion/styled/macro';\nimport { Flex, Button } from 'rebass';\n\n\nconst PaginationWrap = styled(Flex)`\n  border: 1px solid #e6e6e6;\n  border-left: 0;\n  border-right: 0;\n`\n\nconst PageNav = styled(Button)`\n  border-radius: 0;\n`\n\nconst Pagination = props => {\n  const { numPages, currentPage, shopifyThemePath } = props;\n  const showNumbers = 2;\n\n  let prevLink = false;\n  let nextLink = false;\n\n  if (currentPage !== 1) {\n    prevLink = shopifyThemePath + '/' + (currentPage - 1);\n  }\n  if (currentPage === 2) {\n    prevLink = shopifyThemePath;\n  }\n  if (currentPage !== numPages) {\n    nextLink = shopifyThemePath + '/' + (currentPage + 1);\n  }\n\n  return (\n    <Fragment>\n      <PaginationWrap justifyContent=\"center\" fontSize={['3vw', '1.5vw', '1vw']}>\n        {prevLink ? (\n          <PageNav\n            as={GatsbyLink}\n            to={prevLink}\n            width={['30vw', '14vw', '12vw']}\n            mr='auto'\n            p={['4vw', '2vw']}\n            sx={{ letterSpacing: ['.4vw', '.2vw'] }}\n            rel=\"prev\"\n            variant=\"pagination\"\n          >\n            Previous\n          </PageNav>\n        ) : (\n          <PageNav\n            width={['30vw', '14vw', '12vw']}\n            mr='auto'\n            p={['4vw', '2vw']}\n            sx={{ letterSpacing: ['.4vw', '.2vw'] }}\n            rel=\"next\"\n            variant=\"pagination\"\n            opacity='0.6'\n          >\n            Previous\n          </PageNav>\n        )}\n\n        {Array.from({ length: numPages }).map((_, i) => {\n          let pageNum = i + 1;\n\n          if (\n            pageNum >= Math.max(1, currentPage - showNumbers) &&\n            pageNum <= Math.min(currentPage + showNumbers, numPages)\n          ) {\n            if (pageNum === currentPage) {\n              return (\n                <PageNav mx='auto' p={['4vw', '2vw']} variant=\"pagination-active\" key={pageNum} sx={{ borderTop: '2px solid', borderBottom: '2px solid', fontWeight: 'bold' }}>\n                  {pageNum}\n                </PageNav>\n              );\n            } else {\n              let link;\n              pageNum === 1\n                ? (link = shopifyThemePath)\n                : (link = shopifyThemePath + '/' + pageNum);\n              return (\n                <PageNav\n                  as={GatsbyLink}\n                  to={link}\n                  mx='auto'\n                  p={['4vw', '2vw']}\n                  variant=\"pagination\"\n                  key={pageNum}\n                >\n                  {pageNum}\n                </PageNav>\n              );\n            }\n          } else {\n            return '';\n          }\n        })}\n\n        {nextLink ? (\n          <PageNav\n            as={GatsbyLink}\n            to={nextLink}\n            width={['30vw', '14vw', '12vw']}\n            ml='auto'\n            p={['4vw', '2vw']}\n            sx={{ letterSpacing: ['.4vw', '.2vw'] }}\n            rel=\"next\"\n            variant=\"pagination\"\n          >\n            Next\n          </PageNav>\n        ) : (\n          <PageNav\n            width={['30vw', '14vw', '12vw']}\n            ml='auto'\n            p={['4vw', '2vw']}\n            sx={{ letterSpacing: ['.4vw', '.2vw'] }}\n            rel=\"next\"\n            variant=\"pagination\"\n            opacity='0.6'\n          >\n            Next\n          </PageNav>\n        )}\n      </PaginationWrap>\n    </Fragment>\n  );\n};\n\nexport default Pagination;\n","import React from 'react';\r\nimport { Flex, Box, Heading, Text } from 'rebass';\r\nimport styled from '@emotion/styled/macro';\r\n\r\nimport IndividualProduct from './IndividualProduct';\r\nimport Pagination from '../../components/Pagination';\r\nimport CollectionStats from '../../components/CollectionStats';\r\n\r\nconst StyledBox = styled(Box)`\r\n  text-align: center;\r\n`\r\n\r\nconst CollectionDesc = styled(Box)`\r\n  line-height: 1.67;\r\n`\r\n\r\nfunction CatalogPage(props) {\r\n  const { gatsbyImageProps } = props.data.store.siteMetadata.gatsbyStorefrontConfig;\r\n  const { limit, skip, cartUrl } = props.pageContext;\r\n  const { title, description } = props.data.collection.nodes[0];\r\n  let products = [];\r\n\r\n  props.data.collection.nodes.forEach((node) => {\r\n    products = [...products, ...node.products];\r\n  });\r\n\r\n  return (\r\n    <StyledBox pt={['26vw', '19vw', '16vw']} fontSize={['4vw', '2vw', '1.2vw']} sx={{ background: 'url(//cdn.shopify.com/s/files/1/0117/9005/7534/files/bg-face.jpg)' }}>\r\n      {/* Header */}\r\n      <Box px={['10vw', '8vw', '20vw']} pb={['5vw', null, '3vw']}>\r\n        <Box fontSize={['9vw', '5vw', '4vw']}>\r\n          {title}\r\n        </Box>\r\n        <CollectionDesc>\r\n          {description}\r\n        </CollectionDesc>\r\n      </Box>\r\n        \r\n      {/* Products */}\r\n      <Box backgroundColor=\"background\" padding={'3vw'}>\r\n        <Box>\r\n          {products.map((product, index) => {\r\n            product['cartUrl'] = cartUrl;\r\n            if (index + 1 > skip && index + 1 <= skip + limit) {\r\n              return (\r\n                <IndividualProduct key={product.shopifyId} product={product} />\r\n              );\r\n            } else {\r\n              return '';\r\n            }\r\n          })}\r\n        </Box>\r\n\r\n        {/* Pagination */}\r\n        <Box width={1} key=\"pagination\">\r\n          <Text sx={{ position: 'relative'}}>\r\n            <Pagination {...props.pageContext} />\r\n          </Text>\r\n        </Box>\r\n      </Box>\r\n    </StyledBox>\r\n  );\r\n}\r\n\r\nexport default CatalogPage;\r\n","import React from 'react';\nimport { Flex, Box, Button, Text } from 'rebass';\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport styled from '@emotion/styled/macro';\n\nimport IndividualProduct from './IndividualProduct';\nimport Pagination from '../../components/Pagination';\nimport CollectionStats from '../../components/CollectionStats';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\n\nconst StyledBox = styled(Box)`\n  text-align: center;\n`\n\nconst CollectionDesc = styled(Box)`\n  line-height: 1.67;\n`\n\nconst CollectionTabs = styled(Tabs)`\n  border-top: 1px solid #e6e6e6;\n  padding: 0 6vw;\n`\n\nfunction CatalogPage(props) {\n  const { gatsbyImageProps } = props.data.store.siteMetadata.gatsbyStorefrontConfig;\n  const { limit, skip, cartUrl } = props.pageContext;\n  const { title, handle, description } = props.data.collection.nodes[0];\n  let products = [];\n\n  props.data.collection.nodes.forEach((node) => {\n    products = [...products, ...node.products];\n  });\n\n  const prodType = handle;\n\n  const data = useStaticQuery(graphql`\n    {\n      tabTitle: allShopifyCollection(filter: {products: {elemMatch: {productType: {in: \"face\"}}}}) {\n        nodes {\n          title\n          handle\n          products {\n            id\n            shopifyId\n            title\n            tags\n            productType\n            fields {\n              shopifyThemePath\n              firstImage {\n                altText\n                originalSrc\n              }\n            }\n            availableForSale\n            priceRange {\n              minVariantPrice {\n                amount\n                currencyCode\n              }\n              maxVariantPrice {\n                amount\n                currencyCode\n              }\n            }\n            variants {\n              shopifyId\n              availableForSale\n              compareAtPrice\n              price\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <StyledBox pt={['26vw', '19vw', '16vw']} fontSize={['4vw', '2vw', '1.2vw']} sx={{ background: 'url(//cdn.shopify.com/s/files/1/0117/9005/7534/files/bg-face.jpg)' }}>\n      {/* Header */}\n      <Box px={['10vw', '8vw', '20vw']} pb={['5vw', null, '3vw']}>\n        <Box fontSize={['9vw', '5vw', '4vw']}>\n          {title}\n        </Box>\n        <CollectionDesc>  \n          {description}\n        </CollectionDesc>\n      </Box>\n\n      <Box sx={{ fontSize: ['3vw', '1.5vw', '1vw'] }}>\n        <Button>test</Button>\n        {/* Tabs */}\n        <CollectionTabs defaultActiveKey=\"all\">\n          <Tab eventKey=\"all\" title={title} sx={{ padding: ['3vw', '1.5vw', '1vw'] }}>\n            {/* Products */}\n            <Box backgroundColor=\"background\" padding={'3vw'}>\n              <Box>\n                {products.map((product, index) => {\n                  product['cartUrl'] = cartUrl;\n                  if (index + 1 > skip && index + 1 <= skip + limit) {\n                    return (\n                      <IndividualProduct key={product.shopifyId} product={product} />\n                    );\n                  } else {\n                    return '';\n                  }\n                })}\n              </Box>\n\n              {/* Pagination */}\n              <Box width={1} key=\"pagination\">\n                <Text sx={{ position: 'relative'}}>\n                  <Pagination {...props.pageContext} />\n                </Text>\n              </Box>\n            </Box>\n          </Tab>\n          \n          {data.tabTitle.nodes.map((tab, index) => {\n            if (tab.handle != prodType) {\n              return (\n                <Tab id={tab.handle} key={index} eventKey={tab.handle} title={tab.title}>\n                  {/* Products */}\n                  <Box backgroundColor=\"background\" padding={'3vw'}>\n                    <Box>\n                      {tab.products.map((product, index) => {\n                        product['cartUrl'] = cartUrl;\n                        if (index + 1 > skip && index + 1 <= skip + limit) {\n                          return (\n                            <IndividualProduct key={product.shopifyId} product={product} />\n                          );\n                        } else {\n                          return '';\n                        }\n                      })}\n                    </Box>\n\n                    {/* Pagination */}\n                    <Box width={1} key=\"pagination\">\n                      <Text sx={{ position: 'relative'}}>\n                        <Pagination {...props.pageContext} />\n                      </Text>\n                    </Box>\n                  </Box>\n                </Tab>\n              )\n            } else {''}\n          })}\n        </CollectionTabs>\n      </Box>\n    </StyledBox>\n  );\n}\n\nexport default CatalogPage;\n","import React from 'react';\r\nimport { Flex, Box, Heading, Text } from 'rebass';\r\nimport { useStaticQuery, graphql } from \"gatsby\";\r\nimport styled from '@emotion/styled/macro';\r\n\r\nimport IndividualProduct from './IndividualProduct';\r\nimport Pagination from '../../components/Pagination';\r\nimport CollectionStats from '../../components/CollectionStats';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\n\r\nconst StyledBox = styled(Box)`\r\n  text-align: center;\r\n`\r\n\r\nconst CollectionDesc = styled(Box)`\r\n  line-height: 1.67;\r\n`\r\n\r\nconst CollectionTabs = styled(Tabs)`\r\n  border-top: 1px solid #e6e6e6;\r\n  padding: 0 6vw;\r\n`\r\n\r\nfunction CatalogPage(props) {\r\n  const { gatsbyImageProps } = props.data.store.siteMetadata.gatsbyStorefrontConfig;\r\n  const { limit, skip, cartUrl } = props.pageContext;\r\n  const { title, handle, description } = props.data.collection.nodes[0];\r\n  let products = [];\r\n\r\n  props.data.collection.nodes.forEach((node) => {\r\n    products = [...products, ...node.products];\r\n  });\r\n\r\n  const prodType = handle;\r\n\r\n  const data = useStaticQuery(graphql`\r\n    {\r\n      tabTitle: allShopifyCollection(filter: {products: {elemMatch: {productType: {in: \"body\"}}}}) {\r\n        nodes {\r\n          title\r\n          handle\r\n          products {\r\n            id\r\n            shopifyId\r\n            title\r\n            tags\r\n            productType\r\n            fields {\r\n              shopifyThemePath\r\n              firstImage {\r\n                altText\r\n                originalSrc\r\n              }\r\n            }\r\n            availableForSale\r\n            priceRange {\r\n              minVariantPrice {\r\n                amount\r\n                currencyCode\r\n              }\r\n              maxVariantPrice {\r\n                amount\r\n                currencyCode\r\n              }\r\n            }\r\n            variants {\r\n              shopifyId\r\n              availableForSale\r\n              compareAtPrice\r\n              price\r\n            }\r\n          }\r\n        }\r\n      }\r\n      store: site {\r\n        siteMetadata {\r\n          gatsbyStorefrontConfig {\r\n            storeName\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return (\r\n    <StyledBox pt={['26vw', '19vw', '16vw']} fontSize={['4vw', '2vw', '1.2vw']} sx={{ background: 'url(//cdn.shopify.com/s/files/1/0117/9005/7534/files/bg-pink.jpg)' }}>\r\n      {/* Header */}\r\n      <Box px={['10vw', '8vw', '20vw']} pb={['5vw', null, '3vw']}>\r\n        <Box fontSize={['9vw', '5vw', '4vw']}>\r\n          {title}\r\n        </Box>\r\n        <CollectionDesc>  \r\n          {description}\r\n        </CollectionDesc>\r\n      </Box>\r\n        \r\n      {/* Tabs */}\r\n      <CollectionTabs defaultActiveKey=\"all\">\r\n        <Tab eventKey=\"all\" title={title}>\r\n      \r\n          {/* Products */}\r\n          <Box backgroundColor=\"background\" padding={'3vw'}>\r\n            <Box>\r\n              {products.map((product, index) => {\r\n                product['cartUrl'] = cartUrl;\r\n                if (index + 1 > skip && index + 1 <= skip + limit) {\r\n                  return (\r\n                    <IndividualProduct key={product.shopifyId} product={product} />\r\n                  );\r\n                } else {\r\n                  return '';\r\n                }\r\n              })}\r\n            </Box>\r\n\r\n            {/* Pagination */}\r\n            <Box width={1} key=\"pagination\">\r\n              <Text sx={{ position: 'relative'}}>\r\n                <Pagination {...props.pageContext} />\r\n              </Text>\r\n            </Box>\r\n          </Box>\r\n        </Tab>\r\n        \r\n        {data.tabTitle.nodes.map((tab, index) => {\r\n          return (\r\n            <Tab index={index} eventKey={tab.title} title={tab.title}>\r\n              {/* Products */}\r\n              <Box backgroundColor=\"background\" padding={'3vw'}>\r\n                <Box>\r\n                  {tab.products.map((product, index) => {\r\n                    product['cartUrl'] = cartUrl;\r\n                    if (index + 1 > skip && index + 1 <= skip + limit) {\r\n                      return (\r\n                        <IndividualProduct key={product.shopifyId} product={product} />\r\n                      );\r\n                    } else {\r\n                      return '';\r\n                    }\r\n                  })}\r\n                </Box>\r\n\r\n                {/* Pagination */}\r\n                <Box width={1} key=\"pagination\">\r\n                  <Text sx={{ position: 'relative'}}>\r\n                    <Pagination {...props.pageContext} />\r\n                  </Text>\r\n                </Box>\r\n              </Box>\r\n            </Tab>\r\n          )\r\n        })}\r\n      </CollectionTabs>\r\n    </StyledBox>\r\n  );\r\n}\r\n\r\nexport default CatalogPage;\r\n","import React from 'react';\r\nimport { Flex, Box, Heading, Text } from 'rebass';\r\nimport styled from '@emotion/styled/macro';\r\n\r\nimport IndividualProduct from './IndividualProduct';\r\nimport Pagination from '../../components/Pagination';\r\nimport CollectionStats from '../../components/CollectionStats';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\n\r\nconst StyledBox = styled(Box)`\r\n  text-align: center;\r\n`\r\n\r\nconst CollectionDesc = styled(Box)`\r\n  line-height: 1.67;\r\n`\r\n\r\nfunction CatalogPageTeal(props) {\r\n  const { gatsbyImageProps } = props.data.store.siteMetadata.gatsbyStorefrontConfig;\r\n  const { limit, skip, cartUrl } = props.pageContext;\r\n  const { title, description } = props.data.collection.nodes[0];\r\n  let products = [];\r\n\r\n  props.data.collection.nodes.forEach((node) => {\r\n    products = [...products, ...node.products];\r\n  });\r\n\r\n  return (\r\n    <StyledBox pt={['26vw', '19vw', '16vw']} fontSize={['4vw', '2vw', '1.2vw']} sx={{ background: 'url(//cdn.shopify.com/s/files/1/0117/9005/7534/files/bg-teal.jpg)' }}>\r\n      {/* Header */}\r\n      <Box px={['10vw', '8vw', '20vw']} pb={['5vw', null, '3vw']}>\r\n        <Box fontSize={['9vw', '5vw', '4vw']}>\r\n          {title}\r\n        </Box>\r\n        <CollectionDesc>\r\n          {description}\r\n        </CollectionDesc>\r\n      </Box>\r\n        \r\n      {/* Products */}\r\n      <Box backgroundColor=\"background\" padding={'3vw'}>\r\n        <Box>\r\n          {products.map((product, index) => {\r\n            product['cartUrl'] = cartUrl;\r\n            if (index + 1 > skip && index + 1 <= skip + limit) {\r\n              return (\r\n                <IndividualProduct key={product.shopifyId} product={product} />\r\n              );\r\n            } else {\r\n              return '';\r\n            }\r\n          })}\r\n        </Box>\r\n\r\n        {/* Pagination */}\r\n        <Box width={1} key=\"pagination\">\r\n          <Text sx={{ position: 'relative'}}>\r\n            <Pagination {...props.pageContext} />\r\n          </Text>\r\n        </Box>\r\n      </Box>\r\n    </StyledBox>\r\n  );\r\n}\r\n\r\nexport default CatalogPageTeal;\r\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { Helmet } from 'react-helmet';\nimport Layout from '../../components/Layout';\nimport CatalogPage from './CatalogPage';\nimport CatalogPageBlue from './CatalogPageBlue';\nimport CatalogPagePink from './CatalogPagePink';\nimport CatalogPageTeal from './CatalogPageTeal';\n\nexport default (props) => {\n  const { title, handle, description } = props.data.collection.nodes[0];\n  const { storeName } = props.data.store.siteMetadata.gatsbyStorefrontConfig;\n  return (\n    <Layout>\n      <Helmet title={title} titleTemplate={`%s — ${storeName}`} defer={false}>\n        <meta name=\"description\" content={description} />\n      </Helmet>\n      {title === 'Face' ?\n        <CatalogPageBlue {...props} />\n      : title === 'Body' ?\n        <CatalogPagePink {...props} />\n      : title === 'Hair' ?\n        <CatalogPageTeal {...props} />\n      : \n        <CatalogPage {...props} />\n      }\n    </Layout>\n  );\n};\n\nexport const catalogQuery = graphql`\n  query CatalogQuery($handle: String) {\n    collection: allShopifyCollection(filter: { handle: { eq: $handle } }) {\n      nodes {\n        title\n        handle\n        description\n        products {\n          id\n          shopifyId\n          title\n          tags\n          productType\n          fields {\n            shopifyThemePath\n            firstImage {\n              altText\n              originalSrc\n            }\n          }\n          availableForSale\n          priceRange {\n            minVariantPrice {\n              amount\n              currencyCode\n            }\n            maxVariantPrice {\n              amount\n              currencyCode\n            }\n          }\n          variants {\n            shopifyId\n            availableForSale\n            compareAtPrice\n            price\n          }\n        }\n      }\n    }\n    store: site {\n      siteMetadata {\n        gatsbyStorefrontConfig {\n          storeName\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}