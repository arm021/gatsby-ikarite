{"version":3,"sources":["webpack:///./node_modules/@gatsbystorefront/gatsby-theme-storefront-shopify/src/components/Pagination/index.jsx","webpack:///./node_modules/@gatsbystorefront/gatsby-theme-storefront-shopify/src/components/AddToCart/index.jsx","webpack:///./node_modules/@gatsbystorefront/gatsby-theme-storefront-shopify/src/components/Badge/index.jsx","webpack:///./node_modules/@gatsbystorefront/gatsby-theme-storefront-shopify/src/templates/catalog/IndividualProduct.jsx","webpack:///./node_modules/@gatsbystorefront/gatsby-theme-storefront-shopify/src/templates/catalog/CatalogPage.jsx","webpack:///./node_modules/@gatsbystorefront/gatsby-theme-storefront-shopify/src/templates/catalog/index.jsx"],"names":["Pagination","props","numPages","currentPage","shopifyThemePath","prevLink","nextLink","justifyContent","as","GatsbyLink","to","mx","rel","variant","Array","from","length","map","_","i","link","pageNum","Math","max","min","key","AddToCart","addItem","useShopifyFunctions","title","shopifyId","amount","cartUrl","isSelectOptions","addToCartHandler","a","variantId","quantity","then","res","navigate","rej","console","error","catch","Error","onClick","Badge","borderRadius","text","format","size","width","height","textColor","bgColor","my","color","bg","alignItems","justifyItems","sx","display","fontSize","fontFamily","React","memo","IndividualProduct","product","gatsbyImageProps","useStaticQuery","site","siteMetadata","gatsbyStorefrontConfig","locales","currency","priceRange","minPrice","minVariantPrice","maxPrice","maxVariantPrice","availableForSale","variants","tags","fields","firstImage","hasPriceRange","hasOneVariant","minDisplayPrice","formatPrice","maxDisplayPrice","compareAtPrice","compareAtPriceFmormatted","hasSaleBadge","Title","Heading","CompareAtPrice","AddToCartStyled","AddToCardGroupBox","Box","px","py","mb","m","position","tag","strings","new","v","sale","soldout","overflow","style","textDecoration","originalSrc","src","alt","top","padding","NoImage","p","textAlign","addToCart","fontWeight","lineHeight","selectOptions","CatalogPage","data","store","pageContext","limit","skip","collection","nodes","description","products","forEach","node","flexWrap","pt","maxWidth","className","background","backgroundColor","index","catalogQuery","storeName","Layout","Helmet","titleTemplate","defer","name","content"],"mappings":"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","file":"component---node-modules-gatsbystorefront-gatsby-theme-storefront-shopify-src-templates-catalog-index-jsx-2887716fc8b25d097f06.js","sourcesContent":["import React, { Fragment } from 'react';\nimport GatsbyLink from 'gatsby-link';\nimport { Flex, Button } from 'rebass';\n\nconst Pagination = props => {\n  const { numPages, currentPage, shopifyThemePath } = props;\n  const showNumbers = 2;\n\n  let prevLink = false;\n  let nextLink = false;\n\n  if (currentPage !== 1) {\n    prevLink = shopifyThemePath + '/' + (currentPage - 1);\n  }\n  if (currentPage === 2) {\n    prevLink = shopifyThemePath;\n  }\n  if (currentPage !== numPages) {\n    nextLink = shopifyThemePath + '/' + (currentPage + 1);\n  }\n\n  return (\n    <Fragment>\n      {numPages > 1 ? (\n        <Flex justifyContent=\"center\">\n          {prevLink ? (\n            <Button\n              as={GatsbyLink}\n              to={prevLink}\n              mx={2}\n              rel=\"prev\"\n              variant=\"pagination\"\n            >\n              {'<'}\n            </Button>\n          ) : (\n            ''\n          )}\n          {Array.from({ length: numPages }).map((_, i) => {\n            let pageNum = i + 1;\n\n            if (\n              pageNum >= Math.max(1, currentPage - showNumbers) &&\n              pageNum <= Math.min(currentPage + showNumbers, numPages)\n            ) {\n              if (pageNum === currentPage) {\n                return (\n                  <Button mx={2} variant=\"pagination-active\" key={pageNum}>\n                    {pageNum}\n                  </Button>\n                );\n              } else {\n                let link;\n                pageNum === 1\n                  ? (link = shopifyThemePath)\n                  : (link = shopifyThemePath + '/' + pageNum);\n                return (\n                  <Button\n                    as={GatsbyLink}\n                    to={link}\n                    mx={2}\n                    variant=\"pagination\"\n                    key={pageNum}\n                  >\n                    {pageNum}\n                  </Button>\n                );\n              }\n            } else {\n              return '';\n            }\n          })}\n          {nextLink ? (\n            <Button\n              as={GatsbyLink}\n              to={nextLink}\n              mx={2}\n              rel=\"next\"\n              variant=\"pagination\"\n            >\n              >\n            </Button>\n          ) : (\n            ''\n          )}\n        </Flex>\n      ) : (\n        ''\n      )}\n    </Fragment>\n  );\n};\n\nexport default Pagination;\n","import React from 'react';\nimport { Text } from 'rebass';\nimport GatsbyLink from 'gatsby-link';\nimport { navigate } from 'gatsby-link';\nimport useShopifyFunctions from '../../hooks/useShopifyFunctions';\n\nconst AddToCart = props => {\n  const { addItem } = useShopifyFunctions();\n  const { title, shopifyId, amount, cartUrl, isSelectOptions = false } = props;\n\n  const addToCartHandler = async (shopifyId, amount, cartUrl) => {\n    addItem({ variantId: shopifyId, quantity: amount })\n      .then(\n        res => {\n          navigate(cartUrl);\n        },\n        rej => {\n          console.error(rej);\n        }\n      )\n      .catch(error => {\n        throw new Error(error);\n      });\n  };\n\n  return !isSelectOptions ? (\n    <Text\n      onClick={() => {\n        addToCartHandler(shopifyId, amount, cartUrl);\n      }}\n      {...props}\n    >\n      {title}\n    </Text>\n  ) : (\n    <Text as={GatsbyLink} {...props}>\n      {title}\n    </Text>\n  );\n};\n\nexport default AddToCart;\n","import React from 'react';\nimport { Flex, Box } from 'rebass';\n\nconst Badge = (props) => {\n  const {\n    text,\n    format = 'circle',\n    size = [48, 58],\n    width = size,\n    height = size,\n    textColor = 'white',\n    bgColor = 'badge',\n    mx,\n    my,\n  } = props;\n\n  let borderRadius;\n  if (format === 'circle') {\n    borderRadius = 9999;\n  } else if (format === 'box') {\n    borderRadius = 15;\n  }\n\n  return (\n    <Flex\n      color={textColor}\n      bg={bgColor}\n      alignItems=\"center\"\n      justifyItems=\"center\"\n      justifyContent=\"center\"\n      mx={mx}\n      my={my}\n      sx={{\n        display: 'inline-block',\n        fontSize: 1,\n        width,\n        height,\n        borderRadius,\n      }}\n    >\n      <Box fontFamily=\"body\">{text}</Box>\n    </Flex>\n  );\n};\n\nexport default React.memo(Badge);\n","import React from 'react';\nimport { Box, Card, Heading, Text } from 'rebass';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport GatsbyImage from 'gatsby-image';\nimport GatsbyLink from 'gatsby-link';\nimport styled from '@emotion/styled/macro';\n\nimport AddToCart from '../../components/AddToCart';\nimport Badge from '../../components/Badge';\nimport NoImage from '../../components/Icons/NoImage';\nimport formatPrice from '../../utils/formatPrice';\nimport strings from './strings.json';\n\nconst IndividualProduct = ({ product, gatsbyImageProps }) => {\n  const data = useStaticQuery(graphql`\n    {\n      site {\n        siteMetadata {\n          gatsbyStorefrontConfig {\n            locales\n            currency\n          }\n        }\n      }\n    }\n  `);\n  const { locales, currency } = data.site.siteMetadata.gatsbyStorefrontConfig;\n\n  const {\n    priceRange: {\n      minVariantPrice: { amount: minPrice },\n      maxVariantPrice: { amount: maxPrice },\n    },\n    availableForSale,\n    variants,\n    title,\n    tags,\n    fields: { shopifyThemePath, firstImage },\n    cartUrl,\n  } = product;\n\n  const hasPriceRange = minPrice !== maxPrice;\n  const hasOneVariant = variants.length === 1;\n\n  const minDisplayPrice = formatPrice(minPrice, locales, currency);\n  const maxDisplayPrice = formatPrice(maxPrice, locales, currency);\n\n  const { compareAtPrice } = variants[0];\n  const compareAtPriceFmormatted = formatPrice(\n    variants[0].compareAtPrice,\n    locales,\n    currency\n  );\n\n  let hasSaleBadge = false;\n\n  // Empty styled components used for targeting as selectors\n  // https://emotion.sh/docs/styled#targeting-another-emotion-component\n  const Image = styled(GatsbyImage)``;\n  const Title = styled(Heading)``;\n\n  const CompareAtPrice = styled.strike`\n    color: #c0c0c0;\n  `;\n\n  const AddToCartStyled = styled(AddToCart)`\n    position: absolute;\n    cursor: pointer;\n    z-index: 1;\n    opacity: 0;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    transition-property: all;\n    transition-duration: 0.3s;\n    transition-timing-function: ease-in-out;\n    transition-delay: 0s;\n  `;\n\n  const AddToCardGroupBox = styled(Box)`\n    // Transform image:\n    & img {\n      width: 100%;\n      object-fit: contain;\n      transition-property: all;\n      transition-duration: 0.6s;\n      transition-timing-function: ease-in-out;\n      transition-delay: 0s;\n      height: 15rem;\n    }\n\n    &:hover img {\n      transform: scale(1.05);\n      transition-property: all;\n      transition-duration: 0.6s;\n      transition-timing-function: ease-in-out;\n      transition-delay: 0s;\n    }\n\n    // Show/hide \"Add to card\" text:\n    &:hover ${AddToCartStyled} {\n      opacity: 100;\n      transform: translateY(-15px);\n      transition-property: all;\n      transition-duration: 0.4s;\n      transition-timing-function: ease-in-out;\n      transition-delay: 0s;\n    }\n    & ${AddToCartStyled} {\n      opacity: 0;\n      margin-top: 15px;\n      transition-property: all;\n      transition-duration: 0.4s;\n      transition-timing-function: ease-in-out;\n      transition-delay: 0s;\n    }\n\n    &:hover ${Title} {\n      opacity: 0;\n      transform: translateY(-15px);\n      transition-property: all;\n      transition-duration: 0.4s;\n      transition-timing-function: ease-in-out;\n      transition-delay: 0s;\n    }\n    & ${Title} {\n      opacity: 100;\n      transition-property: all;\n      transition-duration: 0.4s;\n      transition-timing-function: ease-in-out;\n      transition-delay: 0s;\n    }\n  `;\n\n  return (\n    <Card px={4} py={2} mb={4} width={[1, 1 / 3, 1 / 4]}>\n      <AddToCardGroupBox>\n        <Box>\n          <Box\n            m={2}\n            sx={{ display: 'inline-block', position: 'absolute', 'z-index': 9 }}\n          >\n            {tags.map((tag) => {\n              if (tag === 'new' && availableForSale) {\n                return (\n                  <Badge\n                    text={strings.new}\n                    bgColor=\"badgeNew\"\n                    my={1}\n                    key={strings.new}\n                  />\n                );\n              } else return '';\n            })}\n            {variants.map((v, i) => {\n              if (\n                v.availableForSale &&\n                v.compareAtPrice &&\n                !hasSaleBadge &&\n                availableForSale\n              ) {\n                hasSaleBadge = true;\n                return (\n                  <Badge\n                    text={strings.sale}\n                    my={1}\n                    key={`${strings.sale}+${i}`}\n                  />\n                );\n              } else return '';\n            })}\n            {!availableForSale ? (\n              <Badge\n                text={strings.soldout}\n                width={90}\n                height={35}\n                bgColor=\"badgeSoldout\"\n                format=\"box\"\n                my={1}\n                key={strings.soldout}\n              />\n            ) : (\n              ''\n            )}\n          </Box>\n\n          {/* Product image */}\n          <Box sx={{ overflow: 'hidden', mb: 2 }}>\n            <GatsbyLink\n              to={shopifyThemePath}\n              style={{ textDecoration: 'none' }}\n            >\n              {firstImage && firstImage.originalSrc ? (\n                <img src={firstImage.originalSrc} alt={title} sx={{ top: ['-2rem', '-3rem', '-5rem'], padding: ['7vw', '2vw'], width: '100%' }} />\n              ) : (\n                <NoImage width=\"100%\" height=\"100%\" color=\"grey\" p={4} />\n              )}\n            </GatsbyLink>\n          </Box>\n\n          {/* Product title */}\n          <Box sx={{ position: 'relative', textAlign: 'center' }} mb={1}>\n            {hasOneVariant ? (\n              <AddToCartStyled\n                title={strings.addToCart}\n                shopifyId={variants[0].shopifyId}\n                amount={1}\n                cartUrl={cartUrl}\n                sx={{\n                  color: 'addToCart',\n                  bg: 'white',\n                  fontFamily: 'body',\n                  fontSize: [1, 2, 3],\n                  fontWeight: 'normal',\n                  lineHeight: '1.25',\n                  py: 3,\n                }}\n              />\n            ) : (\n              <AddToCartStyled\n                isSelectOptions=\"true\"\n                title={strings.selectOptions}\n                to={shopifyThemePath}\n                sx={{\n                  color: 'addToCart',\n                  ':hover,:focus,.active': {\n                    color: 'addToCart',\n                    textDecoration: 'none',\n                  },\n                  bg: 'white',\n                  fontFamily: 'body',\n                  fontSize: [1, 2, 3],\n                  fontWeight: 'normal',\n                  lineHeight: '1.25',\n                  py: 3,\n                }}\n              />\n            )}\n\n            <Title as=\"h3\" sx={{ fontSize: 2, py: 3, height: ['auto', '120px', '100px'], overflow: 'hidden' }} >\n              {title}\n            </Title>\n          </Box>\n          \n          {/* Price */}\n          <Box>\n            <Text sx={{ color: 'black', fontSize: [1], fontWeight: 'bold' }}>\n              {minDisplayPrice} {hasPriceRange && `- ${maxDisplayPrice}`}{' '}\n              {hasOneVariant && compareAtPrice > minPrice && (\n                <CompareAtPrice>{compareAtPriceFmormatted}</CompareAtPrice>\n              )}\n            </Text>\n          </Box>\n        </Box>\n      </AddToCardGroupBox>\n    </Card>\n  );\n};\n\nexport default IndividualProduct;\n","import React from 'react';\nimport { Flex, Box, Heading, Text } from 'rebass';\n\nimport IndividualProduct from './IndividualProduct';\nimport Pagination from '../../components/Pagination';\nimport CollectionStats from '../../components/CollectionStats';\n\nfunction CatalogPage(props) {\n  const {\n    gatsbyImageProps,\n  } = props.data.store.siteMetadata.gatsbyStorefrontConfig;\n  const { limit, skip, cartUrl } = props.pageContext;\n  const { title, description } = props.data.collection.nodes[0];\n  let products = [];\n\n  props.data.collection.nodes.forEach((node) => {\n    products = [...products, ...node.products];\n  });\n\n  return (\n    <Box flexWrap=\"wrap\" px={2} pt={3} mx=\"auto\" style={{ maxWidth: 1300 }}>\n      {/* Header */}\n      <Box className=\"card border-0 text-center\" sx={{ background: 'transparent' }}>\n        <Box className=\"card-body\">\n          <Box className=\"header\" fontSize={[30, 36, 60]}>\n            {title}\n          </Box>\n          <Box className=\"card-text border-0 mx-auto\" width={[null, '75%']} fontSize={[1, 2, 18]}>\n            {description}\n          </Box>\n        </Box>\n          \n        {/* Products */}\n        <Box className=\"container mx-auto\">\n          <Box className=\"card rounded-0 border-bottom-0\" backgroundColor=\"background\">\n            <Box className=\"card-body card-deck row\">\n              {products.map((product, index) => {\n                product['cartUrl'] = cartUrl;\n                if (index + 1 > skip && index + 1 <= skip + limit) {\n                  return (\n                    <IndividualProduct key={product.shopifyId} product={product} />\n                  );\n                } else {\n                  return '';\n                }\n              })}\n            </Box>\n\n            {/* Pagination */}\n            <Box className=\"border-top border-bottom\" width={1} key=\"pagination\">\n              <Text sx={{ position: 'relative'}}>\n                <Pagination {...props.pageContext} />\n              </Text>\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n\nexport default CatalogPage;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { Helmet } from 'react-helmet';\nimport Layout from '../../components/Layout';\nimport CatalogPage from './CatalogPage';\n\nexport default (props) => {\n  const { title, description } = props.data.collection.nodes[0];\n  const { storeName } = props.data.store.siteMetadata.gatsbyStorefrontConfig;\n  return (\n    <Layout>\n      <Helmet title={title} titleTemplate={`%s — ${storeName}`} defer={false}>\n        <meta name=\"description\" content={description} />\n      </Helmet>\n      <CatalogPage {...props} />\n    </Layout>\n  );\n};\n\nexport const catalogQuery = graphql`\n  query CatalogQuery($handle: String) {\n    collection: allShopifyCollection(filter: { handle: { eq: $handle } }) {\n      nodes {\n        title\n        handle\n        description\n        products {\n          id\n          shopifyId\n          title\n          tags\n          fields {\n            shopifyThemePath\n            firstImage {\n              altText\n              originalSrc\n            }\n          }\n          availableForSale\n          priceRange {\n            minVariantPrice {\n              amount\n              currencyCode\n            }\n            maxVariantPrice {\n              amount\n              currencyCode\n            }\n          }\n          variants {\n            shopifyId\n            availableForSale\n            compareAtPrice\n            price\n          }\n        }\n      }\n    }\n    tabs: allShopifyProduct {\n      nodes {\n        handle\n        tags\n      }\n    }\n    store: site {\n      siteMetadata {\n        gatsbyStorefrontConfig {\n          storeName\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}